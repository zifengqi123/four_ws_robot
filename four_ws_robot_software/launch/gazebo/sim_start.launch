<?xml version="1.0"?>
<launch>

    <!-- gazebo -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="false" doc="[true, false]"/>
    <arg name="recording" default="false"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>
    <arg name="verbose" default="false"/>
    <arg name="output" default="screen"/>
    <arg name="world_name" default="turtlebot3_stage_4" doc="[..._stage_1-4]"/>
    <arg name="respawn_gazebo" default="false"/>
    <arg name="use_clock_frequency" default="false"/>
    <arg name="pub_clock_frequency" default="100"/>
    <arg name="enable_ros_network" default="true"/>
    <arg name="server_required" default="false"/>
    <arg name="gui_required" default="false"/>
    <!-- urdf model -->
    <arg name="model" default="$(find four_ws_robot_description)/urdf/four_ws_robot.urdf.xacro"/>
    <!-- urdf spawner -->
    <arg name="robot_pose_x" default="0.0"/>
    <arg name="robot_pose_y" default="0.0"/>
    <arg name="robot_pose_z" default="0.15"/>
    <!-- select slam algorithm ... -->
    <arg name="slam_algorithm" default="hector_mapping" doc="[hector_mapping, slam_gmapping]"/>
    <!-- ... and config -->
    <arg name="algorithm_config" default="test" doc="[default, original, test]"/>
    <!-- selecting keyboard or joystick controls -->
    <arg name="control_method" default="joystick" doc="[keyboard, joystick]"/>
    <!-- map file for amcl and navigation -->
    <arg name="map_file" default="$(find four_ws_robot_software)/maps/$(arg world_name).yaml"/>

    <!-- parameter is used to save the map scan with the name of the map from the simulation -->
    <param name="map_name" value="$(arg world_name)"/>

    <!-- simulation with robot -->
    <include file="$(find four_ws_robot_description)/launch/four_ws_robot.launch">
        <!-- gazebo -->
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="recording" value="$(arg recording)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="physics" value="$(arg physics)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="world_name" value="$(find gazebo_models_worlds_collection)/worlds/$(arg world_name).world"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
        <arg name="use_clock_frequency" value="$(arg use_clock_frequency)"/>
        <arg name="pub_clock_frequency" value="$(arg use_clock_frequency)"/>
        <arg name="enable_ros_network" value="$(arg enable_ros_network)"/>
        <arg name="server_required" value="$(arg server_required)"/>
        <arg name="gui_required" value="$(arg gui_required)"/>
        <!-- urdf spawner -->
        <arg name="robot_pose_x" value="$(arg robot_pose_x)"/>
        <arg name="robot_pose_y" value="$(arg robot_pose_y)"/>
        <arg name="robot_pose_z" value="$(arg robot_pose_z)"/>
        <!-- urdf model -->
        <arg name="model" value="$(arg model)"/>
    </include>

    <!-- solving slam problem -->
    <include file="$(find four_ws_robot_software)/launch/base/$(arg slam_algorithm).launch">
        <arg name="algorithm_config" value="$(arg algorithm_config)"/>
    </include>

    <!-- solving localization problem -->
    <!-- <include file="$(find four_ws_robot_software)/launch/base/map_server.launch">
        <arg name="map_file" value="$(arg map_file)"/>
    </include>
    <include file="$(find four_ws_robot_software)/launch/base/amcl.launch">
        <arg name="algorithm_config" value="$(arg algorithm_config)"/>
        <arg name="robot_pose_x" value="$(arg robot_pose_x)"/>
        <arg name="robot_pose_y" value="$(arg robot_pose_y)"/>
    </include> -->

    <!-- solving navigation problem (in a known or unknown space) -->
    <!-- <include file="$(find four_ws_robot_software)/launch/base/move_base.launch">
        <arg name="algorithm_config" value="$(arg algorithm_config)"/>
    </include> -->

    <!-- odometry filter-->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization" output="screen">
        <rosparam command="load" file="$(find four_ws_robot_software)/config/robot_localization_params/ekf_sim.yaml" />
        <remap from="/odometry/filtered" to="/odometry/filtered"/>
        <remap from="/cmd_vel" to="/four_wheel_steering_controller/cmd_vel"/>
    </node>

    <!-- selecting keyboard or joystick controls -->
    <!-- keyboard controls -->
    <group if="$(eval control_method == 'keyboard')">
        <include file="$(find four_ws_robot_teleop)/launch/key_teleop.launch">
            <arg name="turbo/steps" value="10"/>
            <arg name="turbo/linear_forward_min" value="0.04"/>
            <arg name="turbo/linear_forward_max" value="0.4"/>
            <arg name="turbo/linear_backward_min" value="0.03"/>
            <arg name="turbo/linear_backward_max" value="0.3"/>
            <arg name="turbo/angular_min" value="0.05"/>
            <arg name="turbo/angular_max" value="0.5"/>
            <arg name="key_teleop_sub" value="/four_wheel_steering_controller/cmd_vel"/>
        </include>
    </group>
    <!-- joystick controls -->
    <group if="$(eval control_method == 'joystick')">
        <include file="$(find four_ws_robot_teleop)/launch/joy_teleop.launch">
            <arg name="joy_dev" value="/dev/input/js0"/>
            <arg name="joy_teleop_sub" value="/four_wheel_steering_controller/cmd_vel"/>
        </include>
    </group>

    <!-- rviz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find four_ws_robot_software)/rviz/full_config.rviz"/>

</launch>