<?xml version="1.0"?>
<launch>

    <!-- gazebo -->
    <arg name="paused"             default="false"/>
    <arg name="use_sim_time"       default="true"/>
    <arg name="gui"                default="false" doc="[true, false]"/>
    <arg name="recording"          default="false"/>
    <arg name="headless"           default="false"/>
    <arg name="debug"              default="false"/>
    <arg name="physics"            default="ode"/>
    <arg name="verbose"            default="false"/>
    <arg name="output"             default="screen"/>
    <arg name="world_name"         default="turtlebot3_stage_4" doc="[..._stage_1-4]"/>
    <!-- urdf spawner -->
    <arg name="robot_pose_x"       default="0.0"/>
    <arg name="robot_pose_y"       default="0.0"/>
    <arg name="robot_pose_z"       default="0.15"/>
    <!-- urdf model -->
    <arg name="model"              default="$(find four_ws_robot_description)/robots/four_ws_robot.urdf.xacro"/>
    <!-- mapping algorithm and config -->
    <arg name="mapping_algorithm"  default="hector_mapping" doc="[slam_gmapping, hector_mapping]"/>
    <arg name="algorithm_config"   default="test" doc="[default, original, test]"/>
    <!-- selecting keyboard or joystick controls -->
    <arg name="control_method"     default="keyboard" doc="[keyboard, joystick]"/>
    <!-- mode -->
    <arg name="mode"               default="mapping" doc="[mapping, localization, navigation]"/>

    <!-- parameter is used to save the map scan with the name of the map from the simulation -->
    <param name="map_name" value="$(arg world_name)"/>

    <!-- simulation -->
    <include file="$(find four_ws_robot_software)/launch/gazebo/simulation.launch">
        <!-- gazebo -->
        <arg name="paused"       value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui"          value="$(arg gui)"/>
        <arg name="recording"    value="$(arg recording)"/>
        <arg name="headless"     value="$(arg headless)"/>
        <arg name="debug"        value="$(arg debug)"/>
        <arg name="physics"      value="$(arg physics)"/>
        <arg name="verbose"      value="$(arg verbose)"/>
        <arg name="output"       value="$(arg output)"/>
        <arg name="world_name"   value="$(find gazebo_models_worlds_collection)/worlds/$(arg world_name).world"/>
        <!-- urdf spawner -->
        <arg name="robot_pose_x" value="$(arg robot_pose_x)"/>
        <arg name="robot_pose_y" value="$(arg robot_pose_y)"/>
        <arg name="robot_pose_z" value="$(arg robot_pose_z)"/>
        <!-- urdf model -->
        <arg name="model"        value="$(arg model)"/>
    </include>

    <!-- mapping algorithm ... -->
    <group if="$(eval mode == 'mapping')">
        <include file="$(find four_ws_robot_software)/launch/mapping.launch">
            <arg name="mapping_algorithm" value="$(arg mapping_algorithm)"/>
            <arg name="algorithm_config"  value="$(arg algorithm_config)"/>
        </include>
    </group>
    <!-- ... localization algorithm ... -->
    <group if="$(eval mode == 'localization')">
        <include file="$(find four_ws_robot_software)/launch/localization.launch">
            <arg name="map_file"         value="$(find four_ws_robot_software)/maps/$(arg world_name).yaml"/>
            <arg name="algorithm_config" value="$(arg algorithm_config)"/>
            <arg name="robot_pose_x"     value="$(arg robot_pose_x)"/>
            <arg name="robot_pose_y"     value="$(arg robot_pose_y)"/>
        </include>
    </group>
    <!-- ... or stack of navigation algorithms -->
    <group if="$(eval mode == 'navigation')">
        <include file="$(find four_ws_robot_software)/launch/mapping.launch">
            <arg name="mapping_algorithm" value="$(arg mapping_algorithm)"/>
            <arg name="algorithm_config"  value="$(arg algorithm_config)"/>
        </include>
        <include file="$(find four_ws_robot_software)/launch/navigation.launch">
            <arg name="map_file"         value="$(find four_ws_robot_software)/maps/$(arg world_name).yaml"/>
            <arg name="algorithm_config" value="$(arg algorithm_config)"/>
            <arg name="robot_pose_x"     value="$(arg robot_pose_x)"/>
            <arg name="robot_pose_y"     value="$(arg robot_pose_y)"/>
        </include>
    </group>

    <!-- selecting keyboard or joystick controls -->
    <!-- keyboard controls -->
    <group if="$(eval control_method == 'keyboard')">
        <node pkg="wr8_software" type="key_teleop.py" name="keyboard_cmd" output="screen" respawn="false">
            <param name="turbo/steps"               value="10"/>
            <param name="turbo/linear_forward_min"  value="0.04"/>
            <param name="turbo/linear_forward_max"  value="0.4"/>
            <param name="turbo/linear_backward_min" value="0.03"/>
            <param name="turbo/linear_backward_max" value="0.3"/>
            <param name="turbo/angular_min"         value="0.05"/>
            <param name="turbo/angular_max"         value="0.5"/>
            <remap from="key_vel" to="four_wheel_steering_controller/cmd_vel"/>
        </node>
    </group>
    <!-- joystick controls -->
    <group if="$(eval control_method == 'joystick')">
        <include file="$(find four_ws_robot_software)/launch/joy_control.launch">
            <arg name="joy_dev"            value="/dev/input/js0"/>
            <arg name="joy_controller_sub" value="/four_wheel_steering_controller/cmd_vel"/>
        </include>
    </group>

    <!-- rviz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find four_ws_robot_software)/rviz/$(arg mode).rviz"/>

</launch>