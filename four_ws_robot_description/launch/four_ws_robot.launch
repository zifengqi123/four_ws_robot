<?xml version="1.0"?>
<launch>

    <!-- gazebo -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="recording" default="false"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>
    <arg name="verbose" default="false"/>
    <arg name="output" default="screen"/>
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="respawn_gazebo" default="false"/>
    <arg name="use_clock_frequency" default="false"/>
    <arg name="pub_clock_frequency" default="100"/>
    <arg name="enable_ros_network" default="true"/>
    <arg name="server_required" default="false"/>
    <arg name="gui_required" default="false"/>
    <!-- urdf model -->
    <arg name="model" default="$(find four_ws_robot_description)/urdf/config.urdf.xacro"/>
    <!-- urdf spawner -->
    <arg name="robot_pose_x" default="0.0"/>
    <arg name="robot_pose_y" default="0.0"/>
    <arg name="robot_pose_z" default="0.05"/>
    <!-- rviz -->
    <arg name="rviz" default="false" />

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro '$(arg model)'"/>

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="four_ws_model_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-x $(arg robot_pose_x)
                -y $(arg robot_pose_y)
                -z $(arg robot_pose_z)
                -urdf
                -model four_ws_robot
                -param robot_description"/>

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="recording" value="$(arg recording)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="physics" value="$(arg physics)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
        <arg name="use_clock_frequency" value="$(arg use_clock_frequency)"/>
        <arg name="pub_clock_frequency" value="$(arg use_clock_frequency)"/>
        <arg name="enable_ros_network" value="$(arg enable_ros_network)"/>
        <arg name="server_required" value="$(arg server_required)"/>
        <arg name="gui_required" value="$(arg gui_required)"/>
    </include>

    <!-- start controllers -->
    <include file="$(find four_ws_robot_control)/launch/robot_control.launch"/>

    <!-- Publish static TFs (fixed joints) -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <rosparam file="$(find four_ws_robot_description)/config/robot_state_publisher_params.yaml" command="load"/>
        <remap from="joint_states" to="joint_states"/>
    </node>

    <!-- Publish dynamic TFs (non-fixed joints) -->
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <rosparam file="$(find four_ws_robot_description)/config/joint_state_publisher_params.yaml" command="load"/>
        <remap from="joint_states" to="joint_states"/>
    </node> -->

    <!-- rviz-->
    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find four_ws_robot_description)/rviz/robot_view.rviz" />

</launch>